#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright Â© 2025 Rejeb Ben Rejeb

set -e

VENV_DIR="/opt/thermalright-lcd-control/venv"
CONFIG_DIR="/etc/thermalright-lcd-control"
APP_DIR="/usr/lib/thermalright-lcd-control"
THEMES_DIR="/usr/share/thermalright-lcd-control"
GUI_CONFIG_FILE="$CONFIG_DIR/gui_config.yaml"

# Function to recreate virtual environment
recreate_venv() {
    echo "Recreating Python virtual environment..."

    # Remove existing venv
    if [ -d "$VENV_DIR" ]; then
        rm -rf "$VENV_DIR"
    fi

    # Create new venv
    python3 -m venv "$VENV_DIR"
    "$VENV_DIR/bin/pip3" install --upgrade pip

    echo "Virtual environment recreated"
}

# Function to install Python dependencies
install_dependencies() {
    echo "Installing Python dependencies..."

    cd "$APP_DIR"
    if command -v python3 >/dev/null 2>&1 && python3 -c "import tomllib" 2>/dev/null; then
        # Python 3.11+ with tomllib
        "$VENV_DIR/bin/pip3" install $(python3 -c "import tomllib; deps = tomllib.load(open('pyproject.toml', 'rb'))['project']['dependencies']; print(' '.join(deps))")
    else
        # Fallback for older versions
        "$VENV_DIR/bin/pip3" install requests>=2.0 PySide6>=6.5 hid~=1.0.8 psutil>=5.8.0 opencv-python>=4.12.0.88 pyusb>=1.3.1 pillow>=11.3.0 pyyaml>=6.0.2
    fi

    echo "Dependencies installed successfully"
}

# Function to update user configurations
update_user_configs() {
    if [ -n "$SUDO_USER" ]; then
        USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
        USER_CONFIG_DIR="$USER_HOME/.config/thermalright-lcd-control"

        echo "Updating user configurations for $SUDO_USER..."

        # Create user data directory
        mkdir -p "$USER_HOME/.local/share/thermalright-lcd-control"
        chown -R "$SUDO_USER":"$SUDO_USER" "$USER_HOME/.local/share/thermalright-lcd-control"

        # Update user configuration directory
        mkdir -p "$USER_CONFIG_DIR"

        # Copy new configuration files (but don't overwrite if they exist and are newer)
        if [ -d "$CONFIG_DIR/config" ]; then
            if [ ! -d "$USER_CONFIG_DIR/config" ]; then
                echo "Updating config.yaml..."
                cp -R $CONFIG_DIR/config "$USER_CONFIG_DIR/"
            else
                echo "User config.yaml is newer, keeping existing version"
            fi
        fi

        # Update themes directory - always update with new themes
        if [ -d "$THEMES_DIR/themes" ]; then
            echo "Updating user themes directory..."
            mkdir -p "$USER_CONFIG_DIR/themes"
            # Copy new themes
            cp -R "$THEMES_DIR/themes" "$USER_CONFIG_DIR/"
            echo "User themes updated"
        fi

        # Update service configuration
        sed -i "s|@config_file@|\"$USER_CONFIG_DIR/config\"|g" /lib/systemd/system/thermalright-lcd-control.service

        # Update GUI config paths
        if [ -f "$GUI_CONFIG_FILE" ]; then
            sed -i "s|themes_dir: \"./resources/themes/presets\"|themes_dir: \"$USER_CONFIG_DIR/themes/presets\"|g" "$GUI_CONFIG_FILE"
            sed -i "s|backgrounds_dir: \"./resources/themes/backgrounds\"|backgrounds_dir: \"$USER_CONFIG_DIR/themes/backgrounds\"|g" "$GUI_CONFIG_FILE"
            sed -i "s|foregrounds_dir: \"./resources/themes/foregrounds\"|foregrounds_dir: \"$USER_CONFIG_DIR/themes/foregrounds\"|g" "$GUI_CONFIG_FILE"
            sed -i "s|service_config: \"./resources/config\"|service_config: \"$USER_CONFIG_DIR/config\"|g" "$GUI_CONFIG_FILE"
        fi

        # Fix ownership
        chown -R "$SUDO_USER":"$SUDO_USER" "$USER_CONFIG_DIR"

        echo "User configurations updated successfully"
    fi
}

# Function to restart services
restart_services() {
    echo "Restarting services..."

    # Stop service if running
    systemctl stop thermalright-lcd-control.service 2>/dev/null

    # Reload systemd
    systemctl daemon-reload

    # Enable service
    systemctl enable thermalright-lcd-control.service

    # Start service
    systemctl start thermalright-lcd-control.service

    echo "Services restarted"
}

# Main installation/update process
main() {
    echo "Starting thermalright-lcd-control installation/update..."

    # Always recreate virtual environment to ensure clean dependencies
    recreate_venv

    # Install dependencies
    install_dependencies

    # Configure permissions
    chown -R root:root "$VENV_DIR"
    chown -R root:root "$CONFIG_DIR"

    # Update user configurations
    update_user_configs

    # Restart services
    restart_services

    echo "Installation/update completed successfully!"
}

# Run main function
main "$@"